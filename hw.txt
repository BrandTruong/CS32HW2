Problem 2
	(r, c)
1. 	(4, 3)
2. 	(3, 3)
3. 	(5, 3)
4. 	(5, 2) 
5. 	(5, 1)
6. 	(6, 1)
7. 	(7, 1)
8. 	(8, 1)
9. 	(8, 2)
10.	(6, 3)
11. 	(4, 4) 
12.	(4, 5)

Problem 4
	(r, c)
1.	(4, 3)
2.	(4, 4)
3.	(5, 3)
4.	(3, 3)
5.	(4, 5)
6.	(6, 3)
7.	(5, 2)
8.	(4, 6)
9. 	(5, 5)
10. 	(5, 1)
11. 	(4, 7)
12. 	(6, 5)

The two algorithms are different in that stacks, like in problem 2, are last in, first out (LIFO) while queues are first in, first out (FIFO). This means that stacks usually check one path first, then checks the most recent unfinished (last) path, then again, until it either finds the endpoints or runs out of possible moves. Queues can check the next steps of one path, then check the next steps of a different path after, making it check all possible paths as they appear, since they look for the most oldest (first).